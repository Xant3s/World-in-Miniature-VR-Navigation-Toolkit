stages:
  - build_and_test
  - deploy

# If you are looking for a place where to add 'UNITY_LICENSE_FILE' and other secrets, please visit your project's gitlab page:
# settings > CI/CD > Variables instead
variables:
  BUILD_NAME: ExampleProjectName
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  UNITY_VERSION: "2020.1.10f1"
  IMAGE: unityci/editor # https://hub.docker.com/r/unityci/editor
  IMAGE_VERSION: "0.7" # https://github.com/Unity-CI/docker/releases
  UNITY_DIR: $CI_PROJECT_DIR # this needs to be an absolute path. Defaults to the root of your tree.


image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - $UNITY_DIR/Library/

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null'
      when: always

# run this job when you need to request a license
# you may need to follow activation steps from documentation
get-activation-file:
  rules:
    - if: '$UNITY_LICENSE == null'
      when: manual
  stage: build_and_test
  script:
    - chmod +x ./ci/get_activation_file.sh && ./ci/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min # Expiring this as artifacts may contain sensitive data and should not be kept public

.test: &test
  stage: build_and_test
  <<: *unity_before_script
  <<: *cache
  <<: *license
  script:
    - chmod +x ./ci/test.sh && ./ci/test.sh
  artifacts:
    paths:
      - $UNITY_DIR/$TEST_PLATFORM-results.xml
      - $UNITY_DIR/$TEST_PLATFORM-coverage/
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:
    - unity
  coverage: /<Linecoverage>(.*?)</Linecoverage>/

test-playmode:
  <<: *test
  variables:
    TEST_PLATFORM: playmode

test-editmode:
  <<: *test
  variables:
    TEST_PLATFORM: editmode

.build: &build
  stage: build_and_test
  <<: *unity_before_script
  <<: *cache
  <<: *license
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    paths:
      - $UNITY_DIR/Builds/
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:
    - unity

# build-StandaloneLinux64:
#   <<: *build
#   variables:
#     BUILD_TARGET: StandaloneLinux64

# linux il2cpp currently unsupported, see https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/139
#build-StandaloneLinux64-il2cpp:
#  <<: *build
#  image: $IMAGE:$UNITY_VERSION-linux-il2cpp-$IMAGE_VERSION
#  variables:
#    BUILD_TARGET: StandaloneLinux64
#    SCRIPTING_BACKEND: IL2CPP
#    # https://forum.unity.com/threads/linux-il2cpp-linux-sysroot-not-specified-or-does-not-exist.854008/
#    IL2CPP_ADDITIONAL_ARGS: "--sysroot-path=/ --tool-chain-path=/"

# build-StandaloneOSX:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-mac-mono-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: StandaloneOSX

#Note: build target names changed in recent versions, use this for versions < 2017.2:
# build-StandaloneOSXUniversal:
#   <<: *build
#   variables:
#     BUILD_TARGET: StandaloneOSXUniversal

build-StandaloneWindows64:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-windows-mono-$IMAGE_VERSION
  variables:
    BUILD_TARGET: StandaloneWindows64

# webgl is currently unsupported, see https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/139
#build-WebGL:
#  <<: *build
#  image: $IMAGE:$UNITY_VERSION-webgl-$IMAGE_VERSION
#  variables:
#    BUILD_TARGET: WebGL

build-android:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
  variables:
    BUILD_TARGET: Android
    BUNDLE_VERSION_CODE: $CI_PIPELINE_IID
    BUILD_APP_BUNDLE: "false"

#deploy-android:
#  stage: deploy
#  image: ruby
#  script:
#    - cd $UNITY_DIR/Builds/Android
#    - echo $GPC_TOKEN > gpc_token.json
#    - gem install bundler
#    - bundle install
#    - fastlane supply --aab $BUILD_NAME.aab --track internal --package_name com.youcompany.yourgame --json_key ./gpc_token.json
#  needs: ["build-android"]

# build-ios-xcode:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-ios-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: iOS

#build-and-deploy-ios:
#  stage: deploy
#  script:
#    - cd $UNITY_DIR/Builds/iOS/$BUILD_NAME
#    - pod install
#    - fastlane ios beta
#  tags:
#    - ios
#    - mac
#  needs: ["build-ios-xcode"]

# Deploying webgl is currently unsupported due to https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/139
#pages:
#  image: alpine:latest
#  stage: deploy
#  script:
#    - mv "$UNITY_DIR/Builds/WebGL/${BUILD_NAME}" public
#  artifacts:
#    paths:
#      - public
#  only:
#    - master



deploy-github:
  when: manual
  stage: deploy
  script:
    - REPO="WIMVR-Deployment"
    - REPOPATH="WIMVR-Plugin/${REPO}"
    - LOGIN="WIMVR-CI"
    - PW="uk9DbdMlbKGuwngwXA"
    - git clone https://${LOGIN}:${PW}@github.com/${REPOPATH}.git
    - chmod +x ./ci/deploy_github.sh
    - cd ci
    - ./deploy_github.sh
    - cd ../${REPO}
    - git config user.email "contact@samueltruman.com"
    - git config user.name "Samuel Truman"
    - git status
    - git add -A
    - git status
    - git commit -a -m "${CI_COMMIT_MESSAGE}"
    - git status
    - git push
  only:
    - master
